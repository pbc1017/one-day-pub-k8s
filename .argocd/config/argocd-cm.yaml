# ArgoCD 기본 설정
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  # Git 리포지토리 설정
  repositories: |
    - url: https://github.com/pbc1017/one-day-pub-sub-k8s.git
      type: git
      name: one-day-pub-k8s
  
  # 애플리케이션 인스턴스 레이블 키
  application.instanceLabelKey: argocd.argoproj.io/instance
  
  # 서버 URL (ArgoCD UI 접근 URL)
  url: https://argocd.one-day-pub.site  # 향후 도메인 설정 시 사용
  
  # Git 커밋 상태 리포팅
  statusbadge.enabled: "true"
  
  # 리소스 제외 설정
  resource.exclusions: |
    - apiVersions: ["v1"]
      kinds: ["Event"]
      clusters: ["*"]
  
  # 리소스 비교 무시 설정
  resource.compareoptions: |
    ignoreAggregatedRoles: true
    ignoreResourceStatusField: true
  
  # Kustomize 설정
  kustomize.enabled: "true"
  kustomize.buildOptions: "--enable-helm"
  
  # 사용자 정의 헬스 체크
  resource.customizations.health.argoproj.io_Application: |
    hs = {}
    hs.status = "Progressing"
    hs.message = ""
    if obj.status ~= nil then
      if obj.status.health ~= nil then
        hs.status = obj.status.health.status
        if obj.status.health.message ~= nil then
          hs.message = obj.status.health.message
        end
      end
    end
    return hs
  
  # MySQL StatefulSet 사용자 정의 헬스 체크
  resource.customizations.health.apps_StatefulSet: |
    hs = {}
    hs.status = "Progressing"
    hs.message = ""
    if obj.status ~= nil then
      if obj.status.readyReplicas ~= nil and obj.status.replicas ~= nil then
        if obj.status.readyReplicas == obj.status.replicas then
          hs.status = "Healthy"
          hs.message = "All replicas are ready"
        else
          hs.status = "Progressing"
          hs.message = "Waiting for replicas to be ready"
        end
      end
    end
    return hs
  
  # Traefik IngressRoute 헬스 체크
  resource.customizations.health.traefik.containo.us_IngressRoute: |
    hs = {}
    hs.status = "Healthy"
    hs.message = "IngressRoute is ready"
    return hs
  
  # 사용자 정의 동작
  resource.customizations.actions.apps_Deployment: |
    discovery.lua: |
      actions = {}
      actions["restart"] = {}
      return actions
    definitions:
    - name: restart
      action.lua: |
        local os = require("os")
        obj.spec.template.metadata.annotations = obj.spec.template.metadata.annotations or {}
        obj.spec.template.metadata.annotations["kubectl.kubernetes.io/restartedAt"] = os.date("!%Y-%m-%dT%TZ")
        return obj
  
  # 동기화 옵션
  application.sync.options: |
    - PrunePropagationPolicy=foreground
    - PruneLast=true
    - RespectIgnoreDifferences=true
    - ApplyOutOfSyncOnly=true